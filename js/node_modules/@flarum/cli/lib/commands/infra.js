"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const composer_1 = require("../steps/misc/composer");
const base_command_1 = (0, tslib_1.__importDefault)(require("../base-command"));
const gen_ext_scaffolder_1 = require("../steps/gen-ext-scaffolder");
const npm_1 = require("../steps/misc/npm");
const yarn_1 = require("../steps/misc/yarn");
const core_1 = require("@oclif/core");
class Infra extends base_command_1.default {
    steps(stepManager, extRoot) {
        const module = this.args.module;
        const mapPaths = this.flags.monorepo
            ? this.monorepoPaths({
                includeCore: true,
                includeExtensions: true,
                includePhpPackages: false,
                includeJSPackages: false,
            })
            : [];
        stepManager.namedStep('infra', (0, gen_ext_scaffolder_1.genExtScaffolder)().genInfraStep(this.args.module), {}, [], {}, mapPaths);
        const JS_MODULES = ['js', 'prettier', 'typescript'];
        const PHP_MODULES = ['backendTesting'];
        const packageManager = this.jsPackageManager(extRoot);
        if (!this.flags.monorepo && JS_MODULES.includes(module)) {
            stepManager.step(packageManager === 'npm' ? new npm_1.NpmInstall() : new yarn_1.YarnInstall(), { optional: true, confirmationMessage: `Run \`${packageManager !== null && packageManager !== void 0 ? packageManager : 'yarn'}\`? (recommended)`, default: true }, [
                {
                    sourceStep: 'infra',
                    exposedName: '__succeeded',
                    dontRunIfFalsy: true,
                },
            ]);
        }
        if (!this.flags.monorepo && PHP_MODULES.includes(module)) {
            stepManager.step(new composer_1.ComposerInstall(), { optional: true, confirmationMessage: 'Run `composer update`? (recommended)', default: true }, [
                {
                    sourceStep: 'infra',
                    exposedName: '__succeeded',
                    dontRunIfFalsy: true,
                },
            ]);
        }
        return stepManager;
    }
    async additionalPreRunChecks(extRoot) {
        const files = (0, gen_ext_scaffolder_1.genExtScaffolder)().moduleFiles(this.args.module);
        await this.confirmOverrideFiles(extRoot, files, 'Infrastructure files already exist. Overwrite with the latest version?');
    }
}
exports.default = Infra;
Infra.description = 'Add/Update infrastructure to the latest scaffolding for some module in an extension. For example, you can use this to add/update TypeScript, backend testing, GitHub Actions, and other features.';
Infra.flags = Object.assign({ monorepo: core_1.Flags.boolean({ char: 'm', default: false }) }, base_command_1.default.flags);
Infra.args = [
    {
        name: 'module',
        description: 'The name of the module to enable/update.',
        required: true,
        options: [...gen_ext_scaffolder_1.EXTENSION_MODULES],
    },
    ...base_command_1.default.args,
];
