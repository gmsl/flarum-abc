"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const base_command_1 = (0, tslib_1.__importDefault)(require("../../base-command"));
const gen_ext_scaffolder_1 = require("../../steps/gen-ext-scaffolder");
const core_1 = require("@oclif/core");
const yarn_1 = require("../../steps/misc/yarn");
const composer_1 = require("../../steps/misc/composer");
const npm_1 = require("../../steps/misc/npm");
class AuditInfra extends base_command_1.default {
    steps(stepManager, extRoot) {
        this.dry = !this.flags.fix;
        const mapPaths = this.flags.monorepo
            ? this.monorepoPaths({
                includeCore: true,
                includeExtensions: true,
                includePhpPackages: false,
                includeJSPackages: false,
            })
            : [];
        stepManager.namedStep('audit', (0, gen_ext_scaffolder_1.genExtScaffolder)().genAuditStep(!this.flags.fix), {}, [], {}, mapPaths);
        if (!this.flags.monorepo && !this.dry) {
            const packageManager = this.jsPackageManager(extRoot);
            stepManager.step(packageManager === 'npm' ? new npm_1.NpmInstall() : new yarn_1.YarnInstall(), { optional: true, confirmationMessage: `Run \`${packageManager !== null && packageManager !== void 0 ? packageManager : 'yarn'}\`? (recommended)`, default: true }, [
                {
                    sourceStep: 'audit',
                    exposedName: '__succeeded',
                    dontRunIfFalsy: true,
                },
            ]);
            stepManager.step(new composer_1.ComposerInstall(), { optional: true, confirmationMessage: 'Run `composer update`? (recommended)', default: true }, [
                {
                    sourceStep: 'audit',
                    exposedName: '__succeeded',
                    dontRunIfFalsy: true,
                },
            ]);
        }
        return stepManager;
    }
    async additionalPreRunChecks(extRoot) {
        const files = (0, gen_ext_scaffolder_1.genExtScaffolder)().moduleFiles(this.args.module);
        await this.confirmOverrideFiles(extRoot, files, 'Infrastructure files already exist. Overwrite with the latest version?');
    }
}
exports.default = AuditInfra;
AuditInfra.description = 'Check for outdated config files, infrastructure, setup, etc.';
AuditInfra.flags = Object.assign({ fix: core_1.Flags.boolean({ char: 'f', default: false }), monorepo: core_1.Flags.boolean({ char: 'm', default: false }) }, base_command_1.default.flags);
AuditInfra.args = [...base_command_1.default.args];
