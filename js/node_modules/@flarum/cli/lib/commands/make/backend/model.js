"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable no-warning-comments */
const pluralize_1 = (0, tslib_1.__importDefault)(require("pluralize"));
const base_command_1 = (0, tslib_1.__importDefault)(require("../../../base-command"));
const model_1 = require("../../../steps/stubs/backend/model");
const migration_1 = require("../../../steps/stubs/backend/migration");
const api_serializer_1 = require("../../../steps/stubs/backend/api-serializer");
const validator_1 = require("../../../steps/stubs/backend/validator");
const repository_1 = require("../../../steps/stubs/backend/repository");
const policy_1 = require("../../../steps/stubs/backend/policy");
const policy_2 = require("../../../steps/extenders/policy");
const api_controller_1 = require("../../../steps/stubs/backend/api-controller");
const handler_1 = require("../../../steps/stubs/backend/handler");
const handler_command_1 = require("../../../steps/stubs/backend/handler-command");
const route_1 = require("../../../steps/extenders/route");
const gen_ext_scaffolder_1 = require("../../../steps/gen-ext-scaffolder");
class Model extends base_command_1.default {
    steps(stepManager) {
        return stepManager.atomicGroup((stepManager) => {
            stepManager
                .namedStep('model', new model_1.GenerateModelStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()))
                .step(new migration_1.GenerateMigrationStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), { optional: true, confirmationMessage: 'Generate corresponding Migration?', default: true }, [
                {
                    sourceStep: 'model',
                    exposedName: 'migrationName',
                    consumedName: 'name',
                },
            ])
                .namedStep('serializer', new api_serializer_1.GenerateApiSerializerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), { optional: true, confirmationMessage: 'Generate corresponding API Serializer?', default: true }, [
                {
                    sourceStep: 'model',
                    exposedName: 'class',
                    consumedName: 'modelClass',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => `${modelClassName}Serializer`,
                },
            ])
                .namedStep('validator', new validator_1.GenerateValidatorStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), { optional: true, confirmationMessage: 'Generate corresponding Validator?', default: true }, [
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => `${modelClassName}Validator`,
                },
            ])
                .namedStep('repository', new repository_1.GenerateRepositoryStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), { optional: true, confirmationMessage: 'Generate corresponding Repository?', default: true }, [
                {
                    sourceStep: 'model',
                    exposedName: 'class',
                    consumedName: 'modelClass',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => `${modelClassName}Repository`,
                },
            ])
                .namedStep('policy', new policy_1.GeneratePolicyStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), { optional: true, confirmationMessage: 'Generate corresponding Policy?', default: true }, [
                {
                    sourceStep: 'model',
                    exposedName: 'class',
                    consumedName: 'modelClass',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => `${modelClassName}Policy`,
                },
            ])
                .step(new policy_2.GeneratePolicyExtender(), {}, [
                {
                    sourceStep: 'policy',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'policy',
                    exposedName: 'class',
                    consumedName: 'policyClass',
                },
                {
                    sourceStep: 'policy',
                    exposedName: 'modelClass',
                },
            ]);
            // Domain Handler Commands
            stepManager
                .namedStep('createHandlerCommand', new handler_command_1.GenerateHandlerCommandStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), { optional: true, confirmationMessage: 'Generate corresponding Domain Handlers?', default: true }, [
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    modifier: (modelClassName) => `Create${modelClassName}`,
                },
            ], {
                classType: 'create',
            })
                .namedStep('updateHandlerCommand', new handler_command_1.GenerateHandlerCommandStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'createHandlerCommand',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    modifier: (modelClassName) => `Edit${modelClassName}`,
                },
            ], {
                classType: 'update',
            })
                .namedStep('deleteHandlerCommand', new handler_command_1.GenerateHandlerCommandStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'createHandlerCommand',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    modifier: (modelClassName) => `Delete${modelClassName}`,
                },
            ], {
                classType: 'delete',
            });
            // Domain Handlers
            stepManager
                .step(new handler_1.GenerateHandlerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'createHandlerCommand',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'createHandlerCommand',
                    exposedName: 'className',
                    modifier: (className) => `${className}Handler`,
                },
                {
                    sourceStep: 'createHandlerCommand',
                    exposedName: 'className',
                    consumedName: 'handlerCommandClass',
                },
                {
                    sourceStep: 'repository',
                    exposedName: 'class',
                    consumedName: 'repositoryClass',
                },
                {
                    sourceStep: 'validator',
                    exposedName: 'class',
                    consumedName: 'validatorClass',
                },
                {
                    sourceStep: 'createHandlerCommand',
                    exposedName: 'classType',
                },
            ])
                .step(new handler_1.GenerateHandlerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'updateHandlerCommand',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'updateHandlerCommand',
                    exposedName: 'className',
                    modifier: (className) => `${className}Handler`,
                },
                {
                    sourceStep: 'updateHandlerCommand',
                    exposedName: 'className',
                    consumedName: 'handlerCommandClass',
                },
                {
                    sourceStep: 'repository',
                    exposedName: 'class',
                    consumedName: 'repositoryClass',
                },
                {
                    sourceStep: 'validator',
                    exposedName: 'class',
                    consumedName: 'validatorClass',
                },
                {
                    sourceStep: 'updateHandlerCommand',
                    exposedName: 'classType',
                },
            ])
                .step(new handler_1.GenerateHandlerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'deleteHandlerCommand',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'deleteHandlerCommand',
                    exposedName: 'className',
                    modifier: (className) => `${className}Handler`,
                },
                {
                    sourceStep: 'deleteHandlerCommand',
                    exposedName: 'className',
                    consumedName: 'handlerCommandClass',
                },
                {
                    sourceStep: 'repository',
                    exposedName: 'class',
                    consumedName: 'repositoryClass',
                },
                {
                    sourceStep: 'deleteHandlerCommand',
                    exposedName: 'classType',
                },
            ], {
                validatorClass: '', // TODO: This type of parameter is a bit of a mess
            });
            // API Controllers
            stepManager
                .namedStep('listApiController', new api_controller_1.GenerateApiControllerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), { optional: true, confirmationMessage: 'Generate corresponding CRUD API Controllers?', default: true }, [
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => {
                        const pluralModelClassName = (0, pluralize_1.default)(modelClassName);
                        return `List${pluralModelClassName}Controller`;
                    },
                },
                {
                    sourceStep: 'serializer',
                    exposedName: 'class',
                    consumedName: 'serializerClass',
                },
            ], {
                classType: 'list',
                handlerCommandClass: '',
            })
                .namedStep('showApiController', new api_controller_1.GenerateApiControllerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'listApiController',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => `Show${modelClassName}Controller`,
                },
                {
                    sourceStep: 'serializer',
                    exposedName: 'class',
                    consumedName: 'serializerClass',
                },
            ], {
                classType: 'show',
                handlerCommandClass: '',
            })
                .namedStep('createApiController', new api_controller_1.GenerateApiControllerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'listApiController',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => `Create${modelClassName}Controller`,
                },
                {
                    sourceStep: 'serializer',
                    exposedName: 'class',
                    consumedName: 'serializerClass',
                },
                {
                    sourceStep: 'createHandlerCommand',
                    exposedName: 'class',
                    consumedName: 'handlerCommandClass',
                },
            ], {
                classType: 'create',
            })
                .namedStep('updateApiController', new api_controller_1.GenerateApiControllerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'listApiController',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => `Update${modelClassName}Controller`,
                },
                {
                    sourceStep: 'serializer',
                    exposedName: 'class',
                    consumedName: 'serializerClass',
                },
                {
                    sourceStep: 'updateHandlerCommand',
                    exposedName: 'class',
                    consumedName: 'handlerCommandClass',
                },
            ], {
                classType: 'update',
            })
                .namedStep('deleteApiController', new api_controller_1.GenerateApiControllerStub(this.STUB_PATH, (0, gen_ext_scaffolder_1.genExtScaffolder)()), {}, [
                {
                    sourceStep: 'listApiController',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'className',
                    consumedName: 'className',
                    modifier: (modelClassName) => `Delete${modelClassName}Controller`,
                },
                {
                    sourceStep: 'serializer',
                    exposedName: 'class',
                    consumedName: 'serializerClass',
                },
                {
                    sourceStep: 'deleteHandlerCommand',
                    exposedName: 'class',
                    consumedName: 'handlerCommandClass',
                },
            ], {
                classType: 'delete',
            })
                // Routes
                .namedStep('listRoute', new route_1.GenerateRoutesExtender(), { optional: true, confirmationMessage: 'Generate corresponding API Routes?', default: true }, [
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routePath',
                    modifier: (value) => `/${value}`,
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routeName',
                    modifier: (value) => `${value}.index`,
                },
                {
                    sourceStep: 'listApiController',
                    exposedName: 'class',
                    consumedName: 'routeHandler',
                },
            ], {
                httpMethod: 'get',
            })
                .step(new route_1.GenerateRoutesExtender(), {}, [
                {
                    sourceStep: 'listRoute',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routePath',
                    modifier: (value) => `/${value}/{id}`,
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routeName',
                    modifier: (value) => `${value}.show`,
                },
                {
                    sourceStep: 'showApiController',
                    exposedName: 'class',
                    consumedName: 'routeHandler',
                },
            ], {
                httpMethod: 'get',
            })
                .step(new route_1.GenerateRoutesExtender(), {}, [
                {
                    sourceStep: 'listRoute',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routePath',
                    modifier: (value) => `/${value}`,
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routeName',
                    modifier: (value) => `${value}.create`,
                },
                {
                    sourceStep: 'createApiController',
                    exposedName: 'class',
                    consumedName: 'routeHandler',
                },
            ], {
                httpMethod: 'post',
            })
                .step(new route_1.GenerateRoutesExtender(), {}, [
                {
                    sourceStep: 'listRoute',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routePath',
                    modifier: (value) => `/${value}/{id}`,
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routeName',
                    modifier: (value) => `${value}.update`,
                },
                {
                    sourceStep: 'updateApiController',
                    exposedName: 'class',
                    consumedName: 'routeHandler',
                },
            ], {
                httpMethod: 'patch',
            })
                .step(new route_1.GenerateRoutesExtender(), {}, [
                {
                    sourceStep: 'listRoute',
                    exposedName: '__succeeded',
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routePath',
                    modifier: (value) => `/${value}/{id}`,
                },
                {
                    sourceStep: 'model',
                    exposedName: 'modelPluralKebab',
                    consumedName: 'routeName',
                    modifier: (value) => `${value}.delete`,
                },
                {
                    sourceStep: 'deleteApiController',
                    exposedName: 'class',
                    consumedName: 'routeHandler',
                },
            ], {
                httpMethod: 'delete',
            });
        });
    }
}
exports.default = Model;
Model.description = 'Generate a model class';
Model.flags = Object.assign({}, base_command_1.default.flags);
Model.args = [...base_command_1.default.args];
