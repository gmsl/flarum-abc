"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseStubStep = void 0;
const tslib_1 = require("tslib");
const pick_deep_1 = (0, tslib_1.__importDefault)(require("pick-deep"));
const mem_fs_editor_1 = require("mem-fs-editor");
const clone_and_fill_1 = require("../utils/clone-and-fill");
const path_1 = require("path");
class BaseStubStep {
    constructor(stubDir, scaffolder) {
        this.composable = true;
        this.additionalExposes = [];
        this.additionalImplicitParams = [];
        this.params = {};
        this.stubDir = stubDir;
        this.scaffolder = scaffolder;
    }
    get exposes() {
        return this.additionalExposes;
    }
    get implicitParams() {
        return [...this.additionalImplicitParams, 'extensionId'];
    }
    async run(fs, paths, io, _providers) {
        const fsEditor = (0, mem_fs_editor_1.create)(fs);
        this.params = await this.compileParams(fs, paths, io);
        const newFileName = await this.getFileName(fs, paths, io);
        const newFilePath = paths.package(this.schema.root || this.defaultRoot, this.subdir, newFileName);
        const stub = (0, clone_and_fill_1.cloneAndFill)(this.schema.sourceFile, this.params);
        fsEditor.copyTpl((0, path_1.resolve)(this.stubDir, stub), newFilePath, this.params);
        return fs;
    }
    getExposed(_paths, _paramProvider) {
        return (0, pick_deep_1.default)(this.params, this.exposes);
    }
    async precompileParams(_fs, _paths, _paramProvider) {
        return {};
    }
    async compileParams(fs, paths, io) {
        const params = await this.precompileParams(fs, paths, io);
        const paramDefs = this.schema.params.filter((param) => !this.implicitParams.includes(param.name) && !Object.keys(params).includes(param.name));
        for (const paramDef of paramDefs) {
            // eslint-disable-next-line no-await-in-loop
            params[paramDef.name] = await io.getParam(paramDef);
        }
        for (const implicitParam of this.implicitParams) {
            if (!params[implicitParam] && io.hasCached(implicitParam)) {
                params[implicitParam] = io.cached()[implicitParam];
            }
        }
        return params;
    }
}
exports.BaseStubStep = BaseStubStep;
