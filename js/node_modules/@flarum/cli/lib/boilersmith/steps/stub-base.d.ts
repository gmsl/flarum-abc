import { Store } from 'mem-fs';
import { ParamDef, IO } from 'boilersmith/io';
import { Paths } from 'boilersmith/paths';
import { DefaultProviders, Step } from 'boilersmith/step-manager';
import { Scaffolder } from 'boilersmith/scaffolding/scaffolder';
interface UserProvidedParam extends Omit<ParamDef, 'type'> {
    type: string;
}
export interface StubGenerationSchema {
    /**
     * A period-delimited subdirectory for where the stub should be
     * located relative to the package root (IE `schema.root`).
     */
    recommendedSubdir: string;
    /**
     * Create the file in the recommended subdir regardless
     * of the current requested dir.
     */
    forceRecommendedSubdir?: boolean;
    /**
     * Where should the file be created in relation to the extension root?
     *
     * Defaults to `./src`.
     */
    root?: string;
    /**
     * The relative path to the stub's source file relative to the
     * `stubs` directory.
     */
    sourceFile: string;
    params: UserProvidedParam[];
}
export declare abstract class BaseStubStep<Providers extends DefaultProviders, PN extends string = string, MN extends string = string> implements Step<Providers> {
    protected stubDir: string;
    protected scaffolder: Scaffolder<PN, MN>;
    constructor(stubDir: string, scaffolder: Scaffolder<PN, MN>);
    abstract type: string;
    protected abstract defaultRoot: string;
    protected abstract schema: StubGenerationSchema;
    composable: boolean;
    get exposes(): string[];
    protected additionalExposes: string[];
    get implicitParams(): string[];
    protected additionalImplicitParams: string[];
    protected params: Record<string, unknown>;
    protected subdir: string;
    run(fs: Store, paths: Paths, io: IO, _providers: Providers): Promise<Store>;
    getExposed(_paths: Paths, _paramProvider: IO): Record<string, unknown>;
    protected precompileParams(_fs: Store, _paths: Paths, _paramProvider: IO): Promise<Record<string, unknown>>;
    protected compileParams(fs: Store, paths: Paths, io: IO): Promise<Record<string, unknown>>;
    protected abstract getFileName(_fs: Store, _paths: Paths, io: IO): Promise<string>;
}
export {};
