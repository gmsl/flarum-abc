import { PromptObject, PromptType } from 'prompts';
declare type BooleanPromptType = PromptType & ('confirm' | 'toggle');
declare type StringPromptType = PromptType & ('text' | 'password' | 'invisible' | 'autocomplete');
declare type DatePromptType = PromptType & 'date';
declare type ListPromptType = PromptType & 'list';
export declare type ParamDef<N extends string = string> = Omit<PromptObject<N>, 'name'> & {
    name: N;
    message: string;
};
export declare type Message = {
    type: 'info' | 'warning' | 'error';
    message: string;
};
export interface IO {
    supportsAnsiColor: boolean;
    /**
     * Prompt the user for some input data.
     */
    getParam(param: ParamDef & {
        type: BooleanPromptType;
    }, noCache?: boolean): Promise<boolean>;
    getParam(param: ParamDef & {
        type: StringPromptType;
    }, noCache?: boolean): Promise<string>;
    getParam(param: ParamDef & {
        type: DatePromptType;
    }, noCache?: boolean): Promise<Date>;
    getParam(param: ParamDef & {
        type: ListPromptType;
    }, noCache?: boolean): Promise<string[]>;
    getParam<T>(param: ParamDef, noCache?: boolean): Promise<T>;
    /**
     * Check if some data has already been prompted for.
     */
    hasCached(name: string): boolean;
    /**
     * Get all cached params.
     */
    cached(): Record<string, unknown>;
    info(message: string, immediate: boolean): void;
    warning(message: string, immediate: boolean): void;
    error(message: string, immediate: boolean): void;
    /**
     * Get all messages that have been logged non-immediately.
     */
    getOutput(): Message[];
    newInstance(cache: Record<string, unknown>, messages: Message[]): IO;
}
declare type OnCancel = () => void;
export declare class PromptsIO implements IO {
    supportsAnsiColor: boolean;
    protected cache: Map<string, unknown>;
    protected messages: Message[];
    protected noInteraction: boolean;
    protected onCancel?: OnCancel;
    protected prev?: {
        val: any;
        prompt: ParamDef;
    };
    constructor(initial?: Record<string, unknown>, messages?: Message[], noInteraction?: boolean, onCancel?: OnCancel);
    getParam<T>(paramDef: ParamDef, noCache?: boolean): Promise<T>;
    hasCached(name: string): boolean;
    /**
     * @internal
     */
    cached(): Record<string, unknown>;
    info(message: string, immediate: boolean): void;
    warning(message: string, immediate: boolean): void;
    error(message: string, immediate: false): void;
    error(message: string, immediate: true): never;
    getOutput(): Message[];
    newInstance(cache: Record<string, unknown>, messages: Message[]): PromptsIO;
}
export {};
