"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.infraStepFactory = void 0;
const module_1 = require("./module");
const template_param_1 = require("./template-param");
function infraStepFactory(scaffoldDir, moduleName, modules, templateParams, excludeScaffoldingFunc, moduleStatusCache) {
    const module = modules.find((m) => m.name === moduleName);
    if (!module) {
        throw new Error(`Module ${moduleName} not found`);
    }
    return {
        type: module.shortDescription,
        composable: true,
        async run(fs, paths, io, _providers) {
            const paramVals = await (0, template_param_1.currParamValues)(templateParams, fs, paths, io);
            const modulesEnabled = await (0, module_1.currModulesEnabled)(modules, fs, paths, moduleStatusCache);
            if (!module.updatable) {
                io.error(`${module.name} is not updatable.`, true);
            }
            const excludeScaffolding = excludeScaffoldingFunc ? excludeScaffoldingFunc(fs, paths) : { files: [], configKeys: {} };
            const initializing = !modulesEnabled[module.name];
            (0, module_1.applyModule)(module, Object.assign(Object.assign({}, modulesEnabled), { [module.name]: true }), paramVals, scaffoldDir, fs, paths, excludeScaffolding, initializing);
            if (moduleStatusCache) {
                (0, module_1.setModuleValue)(module, true, fs, paths, moduleStatusCache);
            }
            return fs;
        },
        exposes: [],
        getExposed(_paths, _paramProvider) {
            return {};
        },
    };
}
exports.infraStepFactory = infraStepFactory;
