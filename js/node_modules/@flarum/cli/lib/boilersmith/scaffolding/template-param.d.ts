import { Store } from 'mem-fs';
import { ParamDef, IO } from 'boilersmith/io';
import { Paths } from '../paths';
interface PromptTemplateParam<T, N extends string = string> {
    /**
     * A config object to prompt for the param's value.
     * Also contains the param name.
     */
    prompt: ParamDef<N>;
    getCurrVal: (fs: Store, paths: Paths) => Promise<T | undefined>;
}
interface ComputedTemplateParam<T, N extends string = string> {
    name: N;
    uses: N[];
    compute: (paths: Paths, ...args: any[]) => Promise<T>;
}
export declare type TemplateParam<T = unknown, N extends string = string> = PromptTemplateParam<T, N> | ComputedTemplateParam<T, N>;
export declare function isPromptParam<T, N extends string>(param: TemplateParam<T, N>): param is PromptTemplateParam<T, N>;
export declare function isComputedParam<T, N extends string>(param: TemplateParam<T, N>): param is ComputedTemplateParam<T, N>;
export declare function getParamName<T, N extends string>(param: TemplateParam<T, N>): N;
export declare function promptParamValues(params: TemplateParam[], paths: Paths, io: IO): Promise<Record<string, unknown>>;
export declare function currParamValues(params: TemplateParam[], fs: Store, paths: Paths, io: IO): Promise<Record<string, unknown>>;
export {};
