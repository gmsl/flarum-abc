"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasePhpStubStep = void 0;
const flarum_base_1 = require("./flarum-base");
class BasePhpStubStep extends flarum_base_1.FlarumBaseStubStep {
    constructor() {
        super(...arguments);
        this.defaultRoot = './src';
        this.phpClassParams = [];
    }
    get exposes() {
        return [...super.exposes, 'class'];
    }
    get implicitParams() {
        return [...super.implicitParams, 'classNamespace'];
    }
    async precompileParams(fs, paths, io) {
        const params = Object.assign(Object.assign({}, (await super.precompileParams(fs, paths, io))), { classNamespace: this.stubNamespace(await this.scaffolder.templateParamVal('packageNamespace', fs, paths, io), paths) });
        let paramDefs = this.schema.params.filter((param) => !this.implicitParams.includes(param.name));
        const classParams = [...this.phpClassParams];
        const classNameParam = paramDefs.find((param) => param.name === 'className');
        if (classNameParam) {
            params.className = await io.getParam(classNameParam);
            params.class = `${params.classNamespace}\\${params.className}`;
            paramDefs = paramDefs.filter((param) => param.name !== 'class' && param.name !== 'className');
        }
        else {
            classParams.push('class');
        }
        for (const classParam of classParams) {
            const paramDef = this.schema.params.find((param) => param.name === classParam);
            if (!paramDef) {
                continue;
            }
            // eslint-disable-next-line no-await-in-loop
            params[classParam] = await io.getParam(paramDef);
            params[`${classParam}Name`] = params[classParam].split('\\').pop();
            paramDefs = paramDefs.filter((param) => param.name !== classParam && param.name !== `${classParam}Name`);
        }
        return params;
    }
    async getFileName(_fs, _paths, io) {
        return (await io.getParam({ name: 'className', message: 'Class Name', type: 'text' })) + '.php';
    }
    stubNamespace(packageNamespace, paths) {
        const subdir = this.schema.forceRecommendedSubdir || paths.requestedDir() === null
            ? this.schema.recommendedSubdir.replace('\\', '.').replace('/', '.')
            : paths.requestedDir().slice(`${paths.package((this.schema.root || this.defaultRoot).replace('./', ''))}/`.length);
        this.subdir = subdir.replace('.', '/');
        let namespace = packageNamespace;
        if (this.schema.root === './tests') {
            namespace += '\\tests';
        }
        if (subdir) {
            namespace += `\\${subdir.replace('.', '\\')}`;
        }
        return namespace;
    }
}
exports.BasePhpStubStep = BasePhpStubStep;
