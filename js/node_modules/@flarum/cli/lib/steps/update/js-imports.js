"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateJSImports = void 0;
const tslib_1 = require("tslib");
const globby_1 = (0, tslib_1.__importDefault)(require("globby"));
const mem_fs_editor_1 = require("mem-fs-editor");
const CORE_JS_NAMESPACES = ['admin', 'common', 'forum'];
const CORE_NAMESPACE_REGEX = new RegExp(`^(${CORE_JS_NAMESPACES.join('|')})/`);
const IMPORT_REGEX = /(?<key>import|export)\s+(?:(?<alias>[\s\w*,{}]+)\s+from)?\s*(["'])?(?<ref>[\s\w./@\\-]+)\3?\s*;?/gm;
class UpdateJSImports {
    constructor() {
        this.type = 'Use full flarum/namespace in JS imports';
        this.composable = false;
        this.exposes = [];
    }
    async run(fs, paths, _paramProvider, _providers) {
        const fsEditor = (0, mem_fs_editor_1.create)(fs);
        const importMap = {};
        const jsSrcDir = paths.package('vendor/flarum/core/js/src');
        const vendorRegex = new RegExp(`${jsSrcDir}/.*(js|jsx|ts|tsx)`);
        const fsVendorFilePaths = fs
            .all()
            .map((file) => file.path)
            .filter((path) => path && vendorRegex.test(path));
        const persistedVendorFilePaths = globby_1.default.sync(`${jsSrcDir}/**/*.{js,jsx,ts,tsx}`);
        for (const currPath of [...fsVendorFilePaths, ...persistedVendorFilePaths]) {
            const withNamespace = currPath.slice(jsSrcDir.length + 1).replace(/\.(js|jsx|ts|tsx)$/, '');
            const noNamespace = withNamespace.replace(CORE_NAMESPACE_REGEX, '');
            importMap[`flarum/${noNamespace}`] = `flarum/${withNamespace}`;
        }
        const srcRegex = new RegExp(`${paths.package('js/src')}/.*(js|jsx|ts|tsx)`);
        const fsSrcFilePaths = fs
            .all()
            .map((file) => file.path)
            .filter((path) => path && srcRegex.test(path));
        const persistedSrcFilePaths = globby_1.default.sync(paths.package('js/src/**/*.{js,jsx,ts,tsx}'));
        for (const match of [...fsSrcFilePaths, ...persistedSrcFilePaths]) {
            let fileCounted = false;
            const currContents = fsEditor.read(match);
            const newContents = currContents.replace(IMPORT_REGEX, (match, ...args) => {
                const currImport = args[3];
                const currImportNoAt = currImport.replace(/^@/, '');
                const newImport = importMap[currImportNoAt] || currImport;
                if (newImport !== currImport && !fileCounted) {
                    fileCounted = true;
                }
                return match.replace(currImport, newImport);
            });
            fsEditor.write(match, newContents);
        }
        return fs;
    }
    getExposed(_paths, _paramProvider) {
        return {};
    }
}
exports.UpdateJSImports = UpdateJSImports;
