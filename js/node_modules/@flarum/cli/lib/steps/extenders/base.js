"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseExtenderStep = void 0;
const mem_fs_editor_1 = require("mem-fs-editor");
const clone_and_fill_1 = require("boilersmith/utils/clone-and-fill");
class BaseExtenderStep {
    constructor() {
        this.composable = true;
        this.exposes = [];
    }
    getExposed() {
        return {};
    }
    async run(fs, paths, io, providers) {
        const fsEditor = (0, mem_fs_editor_1.create)(fs);
        this.params = await this.compileParams(io);
        const filledExtenderDef = (0, clone_and_fill_1.cloneAndFill)(this.schema.extenderDef, this.params);
        const currExtendPhp = fsEditor.read(paths.package('extend.php'));
        const newExtendPhp = providers.php.withExtender(currExtendPhp, filledExtenderDef);
        fsEditor.write(paths.package('extend.php'), newExtendPhp);
        return fs;
    }
    async compileParams(io) {
        const params = {};
        const paramDefs = this.schema.params;
        for (const paramDef of paramDefs) {
            // eslint-disable-next-line no-await-in-loop
            params[paramDef.name] = await io.getParam(paramDef);
        }
        return params;
    }
}
exports.BaseExtenderStep = BaseExtenderStep;
