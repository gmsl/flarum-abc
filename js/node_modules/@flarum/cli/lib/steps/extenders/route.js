"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateRoutesExtender = void 0;
const tslib_1 = require("tslib");
const validation_1 = require("../../utils/validation");
const php_provider_1 = require("../../providers/php-provider");
const base_1 = require("./base");
const chalk_1 = (0, tslib_1.__importDefault)(require("chalk"));
class GenerateRoutesExtender extends base_1.BaseExtenderStep {
    constructor() {
        super(...arguments);
        this.type = 'Generate Route extender';
        this.schema = {
            extenderDef: {
                extender: {
                    className: '\\Flarum\\Extend\\Routes',
                    args: [
                        {
                            type: php_provider_1.ExpressionType.SCALAR,
                            value: 'api',
                        },
                    ],
                },
                methodCalls: [
                    {
                        methodName: '${httpMethod}',
                        args: [
                            {
                                type: php_provider_1.ExpressionType.SCALAR,
                                value: '${routePath}',
                            },
                            {
                                type: php_provider_1.ExpressionType.SCALAR,
                                value: '${routeName}',
                            },
                            {
                                type: php_provider_1.ExpressionType.CLASS_CONST,
                                value: '${routeHandler}',
                                auxiliaryValue: 'class',
                            },
                        ],
                    },
                ],
            },
            params: [
                {
                    name: 'httpMethod',
                    type: 'autocomplete',
                    message: 'HTTP Method',
                    choices: ['post', 'get', 'delete', 'patch', 'put'].map((method) => ({
                        title: method,
                        value: method,
                    })),
                },
                {
                    name: 'routePath',
                    type: 'text',
                    message: `Route Path (${chalk_1.default.dim('/pathName')})`,
                },
                {
                    name: 'routeName',
                    type: 'text',
                    validate: validation_1.Validator.routeName,
                    message: `Route Name (Must be unique: ${chalk_1.default.dim('pathName.index')})`,
                },
                {
                    name: 'routeHandler',
                    type: 'text',
                    validate: validation_1.Validator.class,
                    message: `Route Handler class ${chalk_1.default.dim('Vendor\\Path\\ClassName')})`,
                },
            ],
        };
    }
}
exports.GenerateRoutesExtender = GenerateRoutesExtender;
