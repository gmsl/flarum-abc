import { Command, Interfaces } from '@oclif/core';
import { IO } from 'boilersmith/io';
import { StepManager } from 'boilersmith/step-manager';
import { FlarumProviders } from './providers';
export declare enum LocationType {
    FLARUM_EXTENSION = 0,
    FLARUM_CORE = 1,
    FLARUM_MONOREPO = 2
}
export default abstract class BaseCommand extends Command {
    protected STUB_PATH: string;
    protected dry: boolean;
    protected locationType?: LocationType;
    protected args: Record<string, any>;
    protected flags: any;
    static flags: Interfaces.FlagInput<any>;
    static args: {
        name: string;
        description: string;
    }[];
    protected requireExistingExtension: boolean;
    run(): Promise<void>;
    protected welcomeMessage(): string;
    protected goodbyeMessage(): string;
    protected additionalPreRunChecks(_extRoot: string): Promise<void>;
    protected abstract steps(stepManager: StepManager<FlarumProviders>, extRoot: string): StepManager<FlarumProviders>;
    protected genIO(): IO;
    protected monorepoPaths(options: {
        includeCore: boolean;
        includeExtensions: boolean;
        includePhpPackages: boolean;
        includeJSPackages: boolean;
    }): string[];
    protected isFlarumMonorepo(path: string): boolean;
    protected isFlarumCore(path: string): boolean;
    protected jsPackageManager(currDir: string): 'yarn' | 'npm' | null;
    protected getFlarumExtensionRoot(currDir: string): Promise<{
        path: string;
        type: LocationType;
    }>;
    protected confirmExtDir(extRoot: string): Promise<void>;
    protected ensureComposerInstallRan(extRoot: string): Promise<void>;
    /**
     * If false, files do not exist so no need to override.
     * If true, files should be overriden.
     * If user says no, will exit and not return anything.
     */
    protected confirmOverrideFiles(dir: string, pattern: string | string[], confirmationMessage: string): Promise<boolean>;
    protected deleteFiles(dir: string, pattern: string): Promise<void>;
}
